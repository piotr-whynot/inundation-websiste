"""

Model of inundation distribution in the Okavango Delta.

Usage
----------
    python inund_model.py input_file output_file skip prob_threshold

Parameters
----------
input_file : str
    path and name of the CSV file with surface area data. That file should be generated by running hydro_model.py

output_file: str
    path and base name of file in which animated output of inundation model will be stored. Extension GIF will be added automatically

skip: int
    number of time steps to be skipped while creating animation. This is to exclude unrealistic maps resulting from bad initial condition for hydro_model.py   

prob_threshold: float
    probability threshold for considering whether or not grid is mapped as inundated. Possible values in the range 0 to 1

Returns
-------
    output_file.gif - a file with animation of inundation maps

"""



import struct
import numpy as np
import PIL
import sys
from matplotlib import pyplot as plt
import pandas as pd
import scipy.stats as st
import matplotlib.animation as animation
from netCDF4 import Dataset


fps=5

mapdir="./config/"
nrow,ncol = 300,303
nofpix = ncol * nrow

if len(sys.argv)<5:
    print(__doc__)
    sys.exit()


input_file=sys.argv[1]
output_file=sys.argv[2]
skip=int(sys.argv[3])
thresh=float(sys.argv[4])


print("reading inundation map parameters...")

ncdata=Dataset(mapdir+"./m_arc.nc")
m=ncdata.variables['Band1'][:]
m[m<0]=1000

ncdata=Dataset(mapdir+"./sigma_arc.nc")
sigma=ncdata.variables['Band1'][:]

ncdata=Dataset(mapdir+"./units_arc.nc")
units=ncdata.variables['Band1'][:]
units=units.astype("float")

units[m<=0]=np.nan
units[sigma<=0]=np.nan

codes={1:"Panhandle", 2:"Thaoge", 3:"Xudum", 4:"Boro", 5:"Khwai", 6:"Nqoga-1a", 7:"Selinda", 8:"Nqoga-2a", 9:"Mboroga"}

unitsf=units.flatten()
mf=m.flatten()
sigmaf=sigma.flatten()

print("done\n")


print("reading inundation area data from "+input_file+"...")
sa=pd.read_csv(input_file, skiprows=0, parse_dates=True, index_col=0)
nts=sa.shape[0]

print("read", nts, "time steps")
print("will skip", skip, "time steps")

print("done\n")


print("processing...")

fig, pl= plt.subplots(figsize=(5, 5))

#preparing empty frame
temp=np.zeros_like(units).astype(float)
temp[:]=0
im = pl.imshow(temp)
#plt.show()

#preparing canvas
pl.set_yticks([])
pl.set_xticks([])
tx=pl.text(0.7,0.9,sa.index.strftime('%Y %B')[0], transform=pl.transAxes)


def plotflood(ts): 
    if ts%10==0:
        print ("ts="+str(ts))
    inu=sa.iloc[ts,:]
    amap=np.zeros_like(mf).astype(float)
    amap[:]=np.nan
    for key in codes.keys():
            area=inu[codes[key]]
            sel=np.where(unitsf==key)[0]
            for x in sel:
                prob=st.norm.cdf(area,mf[x],sigmaf[x])
                if thresh>0:
                    if prob>thresh:
                        amap[x]=1
                else:
                        amap[x]=prob
    amap=np.flipud(amap.reshape(nrow,ncol))
    tx.set_text(sa.index.strftime('%Y %B')[ts])
    im.set_array(amap)
    #plt.imshow(amap)
    #plt.show()

    return im,

ani = animation.FuncAnimation(fig, plotflood, range(skip,nts))
writer = animation.ImageMagickFileWriter(fps=fps)
ani.save(output_file+".gif", writer=writer) 


